<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="d9j0,o?*3-vmh8YQLIhe" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="0`2rDR5n;I40s2%5E1ov" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace webcam {" line1="    const CHANNEL = &quot;webcam&quot;" line2="    const EVENT_ID = 4567" line3="    const FRAME_EVENT = 1" line4="" line5="    const MICROBIT_ID_BUTTON_A = 1" line6="    const MICROBIT_BUTTON_EVT_CLICK = 3" line7="    let imageBuffer: Buffer = undefined" line8="" line9="" line10="    let initialized = false;" line11="    export let currentFrame: Image = undefined;" line12="" line13="    /**" line14="     * Registers a handler when an image is onReceived" line15="     * from the webcam" line16="    */" line17="    export function onFrameReceived(handler: () =&gt; void) {" line18="        init()" line19="        control.onEvent(EVENT_ID, FRAME_EVENT, function () {" line20="            if (handler)" line21="                handler();" line22="        })" line23="" line24="        control.onEvent(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK, function() {" line25="            currentFrame" line26="            serial.writeBuffer(imageBuffer)" line27="        })" line28="" line29="    }" line30="    " line31="    function init() {" line32="        if (!initialized)" line33="            initialized = true;" line34="" line35="        control.simmessages.onReceived(CHANNEL, function (msg: Buffer) {" line36="            // buffer is the encoded image" line37="            currentFrame = image.ofBuffer(msg);" line38="            imageBuffer = msg" line39="            control.raiseEvent(EVENT_ID, FRAME_EVENT)" line40="        })" line41="    }" line42="" line43="}" numlines="44"></mutation></block></statement></block></xml>